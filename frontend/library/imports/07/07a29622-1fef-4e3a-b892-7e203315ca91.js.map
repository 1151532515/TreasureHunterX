{"version":3,"sources":["../../../../assets/scripts/assets/scripts/WsSessionMgr.js"],"names":["window","sendSafely","msgStr","clientSession","readyState","WebSocket","OPEN","send","closeWSConnection","cc","log","close","getBoundRoomIdFromPersistentStorage","expiresAt","parseInt","sys","localStorage","Date","now","clearBoundRoomIdInBothVolatileAndPersistentStorage","boundRoomId","removeItem","handleHbRequirements","resp","constants","RET_CODE","OK","ret","data","clientSessionPingInterval","setInterval","param","msgId","act","clientTimestamp","JSON","stringify","intervalToPing","handleHbPong","_base64ToUint8Array","base64","binary_string","atob","len","length","bytes","Uint8Array","i","charCodeAt","_base64ToArrayBuffer","buffer","initPersistentSessionClient","onopenCb","intAuthToken","selfPlayer","parse","urlToConnect","backendAddress","PROTOCOL","replace","HOST","PORT","WS_PATH_PREFIX","expectedRoomId","qDict","getQueryParamDict","history","state","console","currentHistoryState","replaceState","document","title","location","pathname","onopen","event","onmessage","handleRoomDownsyncFrame","typedArray","parsedRoomDownsyncFrame","RoomDownsyncFrame","decode","handleGameReadyResp","onerror","error","clearInterval","handleClientSessionCloseOrError","onclose","wasClean","code","PLAYER_NOT_FOUND","PLAYER_CHEATING"],"mappings":"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","file":"WsSessionMgr.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["\n\nwindow.sendSafely = function(msgStr) {\n  /**\n  * - \"If the data can't be sent (for example, because it needs to be buffered but the buffer is full), the socket is closed automatically.\"\n  *\n  * from https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send.\n  */\n  if (null == window.clientSession || window.clientSession.readyState != WebSocket.OPEN) return false;\n  window.clientSession.send(msgStr);\n}\n\nwindow.closeWSConnection = function() {\n  if (null == window.clientSession || window.clientSession.readyState != WebSocket.OPEN) return;\n  cc.log(`Closing \"window.clientSession\" from the client-side.`);\n  window.clientSession.close();\n}\n\nwindow.getBoundRoomIdFromPersistentStorage = function() {\n  const expiresAt = parseInt(cc.sys.localStorage.expiresAt);\n  if (!expiresAt || Date.now() >= expiresAt) {\n    window.clearBoundRoomIdInBothVolatileAndPersistentStorage();\n    return null;\n  }\n  return cc.sys.localStorage.boundRoomId;\n};\n\nwindow.clearBoundRoomIdInBothVolatileAndPersistentStorage = function() {\n  window.boundRoomId = null;\n  cc.sys.localStorage.removeItem(\"boundRoomId\");\n  cc.sys.localStorage.removeItem(\"expiresAt\");\n};\n\nwindow.boundRoomId = getBoundRoomIdFromPersistentStorage();\nwindow.handleHbRequirements = function(resp) {\n  if (constants.RET_CODE.OK != resp.ret) return;\n  if (null == window.boundRoomId) {\n    window.boundRoomId = resp.data.boundRoomId;\n    cc.sys.localStorage.boundRoomId = window.boundRoomId;\n    cc.sys.localStorage.expiresAt = Date.now() + 10 * 60 * 1000; //TODO: hardcoded, boundRoomId过期时间\n  }\n\n  window.clientSessionPingInterval = setInterval(() => {\n    if (clientSession.readyState != WebSocket.OPEN) return;\n    const param = {\n      msgId: Date.now(),\n      act: \"HeartbeatPing\",\n      data: {\n        clientTimestamp: Date.now()\n      }\n    };\n    window.sendSafely(JSON.stringify(param));\n  }, resp.data.intervalToPing);\n};\n\nwindow.handleHbPong = function(resp) {\n  if (constants.RET_CODE.OK != resp.ret) return;\n// TBD.\n};\n\nfunction _base64ToUint8Array(base64) {\n  var binary_string = window.atob(base64);\n  var len = binary_string.length;\n  var bytes = new Uint8Array(len);\n  for (var i = 0; i < len; i++) {\n    bytes[i] = binary_string.charCodeAt(i);\n  }\n  return bytes;\n}\n\nfunction _base64ToArrayBuffer(base64) {\n  return _base64ToUint8Array(base64).buffer;\n}\n\n\nwindow.initPersistentSessionClient = function(onopenCb) {\n  if (window.clientSession && window.clientSession.readyState == WebSocket.OPEN) {\n    if (null != onopenCb) {\n      onopenCb();\n    }\n    return;\n  }\n\n  const intAuthToken = cc.sys.localStorage.selfPlayer ? JSON.parse(cc.sys.localStorage.selfPlayer).intAuthToken : \"\";\n\n  let urlToConnect = backendAddress.PROTOCOL.replace('http', 'ws') + '://' + backendAddress.HOST + \":\" + backendAddress.PORT + backendAddress.WS_PATH_PREFIX + \"?intAuthToken=\" + intAuthToken;\n\n  let expectedRoomId = null;\n  const qDict = window.getQueryParamDict();\n  if (qDict) {\n    expectedRoomId = qDict[\"expectedRoomId\"];\n  } else {\n    if (window.history && window.history.state) {\n      expectedRoomId = window.history.state.expectedRoomId;\n    }\n  }\n  if (expectedRoomId) {\n    console.log(\"initPersistentSessionClient with expectedRoomId == \" +  expectedRoomId);\n    urlToConnect = urlToConnect + \"&expectedRoomId=\" + expectedRoomId;\n  } else {\n    window.boundRoomId = getBoundRoomIdFromPersistentStorage();\n    if (null != window.boundRoomId) {\n      console.log(\"initPersistentSessionClient with boundRoomId == \" +  boundRoomId);\n      urlToConnect = urlToConnect + \"&boundRoomId=\" + window.boundRoomId;\n    }\n  }\n\n  const currentHistoryState = window.history && window.history.state ? window.history.state : {}; \n  window.history.replaceState(currentHistoryState, document.title, window.location.pathname);\n\n\n  const clientSession = new WebSocket(urlToConnect);\n\n  clientSession.onopen = function(event) {\n    cc.log(\"The WS clientSession is opened.\");\n    window.clientSession = clientSession;\n    if (null == onopenCb) return;\n    onopenCb();\n  };\n\n  clientSession.onmessage = function(event) {\n    const resp = JSON.parse(event.data)\n    switch (resp.act) {\n      case \"HeartbeatRequirements\":\n        window.handleHbRequirements(resp);\n        break;\n      case \"HeartbeatPong\":\n        window.handleHbPong(resp);\n        break;\n      case \"RoomDownsyncFrame\":\n        if (window.handleRoomDownsyncFrame) {\n          const typedArray = _base64ToUint8Array(resp.data);\n          //console.log(typedArray)\n          const parsedRoomDownsyncFrame = window.RoomDownsyncFrame.decode(typedArray);\n          window.handleRoomDownsyncFrame(parsedRoomDownsyncFrame);\n        }\n        break;\n      case \"Ready\": {\n        if (window.handleGameReadyResp) {\n          window.handleGameReadyResp(resp);\n        }\n        break;\n      }\n      default:\n        cc.log(`${JSON.stringify(resp)}`);\n        break;\n    }\n  };\n\n  clientSession.onerror = function(event) {\n    cc.error(`Error caught on the WS clientSession:`, event);\n    if (window.clientSessionPingInterval) {\n      clearInterval(window.clientSessionPingInterval);\n    }\n    if (window.handleClientSessionCloseOrError) {\n      window.handleClientSessionCloseOrError();\n    }\n  };\n\n  clientSession.onclose = function(event) {\n    cc.log(`The WS clientSession is closed:`, event);\n    if (window.clientSessionPingInterval) {\n      clearInterval(window.clientSessionPingInterval);\n    }\n    if (false == event.wasClean) {\n      // Chrome doesn't allow the use of \"CustomCloseCode\"s (yet) and will callback with a \"WebsocketStdCloseCode 1006\" and \"false == event.wasClean\" here. See https://tools.ietf.org/html/rfc6455#section-7.4 for more information.\n      if (window.handleClientSessionCloseOrError) {\n        window.handleClientSessionCloseOrError();\n      }\n    } else {\n      switch (event.code) {\n        case constants.RET_CODE.PLAYER_NOT_FOUND:\n        case constants.RET_CODE.PLAYER_CHEATING:\n          window.clearBoundRoomIdInBothVolatileAndPersistentStorage();\n          break;\n        default:\n          break;\n      }\n\n      if (window.handleClientSessionCloseOrError) {\n        window.handleClientSessionCloseOrError();\n      }\n    }\n  };\n};\n\n"]}