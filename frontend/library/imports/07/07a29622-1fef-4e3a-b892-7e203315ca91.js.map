{"version":3,"sources":["../../../../assets/scripts/assets/scripts/WsSessionMgr.js"],"names":["window","closeWSConnection","clientSession","readyState","WebSocket","OPEN","close","getBoundRoomIdFromPersistentStorage","existingBoundRoomIdInPersistentStorage","cc","sys","localStorage","selfPlayer","JSON","parse","boundRoomId","handleHbRequirements","resp","constants","RET_CODE","OK","ret","data","oldVal","newVal","Object","assign","stringify","clientSessionPingInterval","setInterval","param","msgId","Date","now","act","clientTimestamp","send","intervalToPing","handleHbPong","initPersistentSessionClient","onopenCb","intAuthToken","urlToConnect","backendAddress","PROTOCOL","replace","HOST","PORT","WS_PATH_PREFIX","onopen","event","log","onmessage","handleDownsyncRoomFrame","onerror","error","clearInterval","handleClientSessionCloseOrError","onclose"],"mappings":"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","file":"WsSessionMgr.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["window.closeWSConnection = function() {\n  if (null == window.clientSession || window.clientSession.readyState != WebSocket.OPEN) return;\n  window.clientSession.close();\n}\n\nwindow.getBoundRoomIdFromPersistentStorage = function() {\n  const existingBoundRoomIdInPersistentStorage = (null != cc.sys.localStorage.selfPlayer) ? JSON.parse(cc.sys.localStorage.selfPlayer).boundRoomId : null;\n  return existingBoundRoomIdInPersistentStorage;\n};\n\nwindow.boundRoomId = getBoundRoomIdFromPersistentStorage();\nwindow.handleHbRequirements = function(resp) {\n  if (constants.RET_CODE.OK != resp.ret) return;\n  if (null == window.boundRoomId) {\n    window.boundRoomId = resp.data.boundRoomId; \n    // By now, `cc.sys.localStorage.selfPlayer` shouldn't be null.\n\n    const oldVal = JSON.parse(cc.sys.localStorage.selfPlayer); \n    const newVal = {};\n    Object.assign(newVal, oldVal);\n    Object.assign(newVal, {\n      boundRoomId: window.boundRoomId\n    });\n    cc.sys.localStorage.selfPlayer = JSON.stringify(newVal);\n  }\n\n  window.clientSessionPingInterval = setInterval(() => {\n    if (clientSession.readyState != WebSocket.OPEN) return;\n    const param = {\n      msgId: Date.now(),\n      act: \"HeartbeatPing\",\n      data: {\n        clientTimestamp: Date.now()\n      }\n    };\n    clientSession.send(JSON.stringify(param));\n  }, resp.data.intervalToPing);\n};\n\nwindow.handleHbPong = function(resp) {\n  if (constants.RET_CODE.OK != resp.ret) return;\n// TBD.\n};\n\nwindow.initPersistentSessionClient = function(onopenCb) {\n  if (window.clientSession && window.clientSession.readyState == WebSocket.OPEN) {\n    if (null == onopenCb)\n      return;\n    onopenCb();\n    return;\n  }\n\n  const intAuthToken = cc.sys.localStorage.selfPlayer ? JSON.parse(cc.sys.localStorage.selfPlayer).intAuthToken : \"\";\n\n  let urlToConnect = backendAddress.PROTOCOL.replace('http', 'ws') + '://' + backendAddress.HOST + \":\" + backendAddress.PORT + backendAddress.WS_PATH_PREFIX + \"?intAuthToken=\" + intAuthToken;\n\n  window.boundRoomId = getBoundRoomIdFromPersistentStorage();\n  if (null != window.boundRoomId) {\n    urlToConnect = urlToConnect + \"&boundRoomId=\" + window.boundRoomId;\n  }\n  const clientSession = new WebSocket(urlToConnect);\n\n  clientSession.onopen = function(event) {\n    cc.log(\"The WS clientSession is opened.\");\n    window.clientSession = clientSession;\n    if (null == onopenCb)\n      return;\n    onopenCb();\n  };\n\n  clientSession.onmessage = function(event) {\n    const resp = JSON.parse(event.data)\n    switch (resp.act) {\n      case \"HeartbeatRequirements\":\n        window.handleHbRequirements(resp);\n        break;\n      case \"HeartbeatPong\":\n        window.handleHbPong(resp);\n        break;\n      case \"RoomDownsyncFrame\":\n        if (window.handleDownsyncRoomFrame) {\n          window.handleDownsyncRoomFrame(resp.data);\n        }\n        break; \n      default:\n        cc.log(`${JSON.stringify(resp)}`);\n        break;\n    }\n  };\n\n  clientSession.onerror = function(event) {\n    cc.error(`Error caught on the WS clientSession: ${event}`);\n    if (window.clientSessionPingInterval) {\n      clearInterval(clientSessionPingInterval);\n    }\n    if (window.handleClientSessionCloseOrError) {\n      window.handleClientSessionCloseOrError();\n    }\n  };\n\n  clientSession.onclose = function(event) {\n    cc.log(`The WS clientSession is closed: ${event}`);\n    if (window.clientSessionPingInterval) {\n      clearInterval(clientSessionPingInterval);\n    }\n    if (window.handleClientSessionCloseOrError) {\n      window.handleClientSessionCloseOrError();\n    }\n  };\n};\n\n"]}