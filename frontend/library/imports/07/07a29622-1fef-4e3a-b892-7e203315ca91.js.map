{"version":3,"sources":["../../../../assets/scripts/assets/scripts/WsSessionMgr.js"],"names":["window","closeWSConnection","clientSession","readyState","WebSocket","OPEN","close","handleHbRequirements","resp","constants","RET_CODE","OK","ret","clientSessionPingInterval","setInterval","param","msgId","Date","now","act","data","clientTimestamp","send","JSON","stringify","intervalToPing","handleHbPong","initPersistentSessionClient","onopenCb","intAuthToken","cc","sys","localStorage","selfPlayer","parse","urlToConnect","backendAddress","PROTOCOL","replace","HOST","PORT","WS_PATH_PREFIX","onopen","event","log","onmessage","onerror","error","handleClientSessionCloseOrError","onclose"],"mappings":";;;;;;AAAAA,OAAOC,iBAAP,GAA2B,YAAW;AACpC,MAAI,QAAQD,OAAOE,aAAf,IAAgCF,OAAOE,aAAP,CAAqBC,UAArB,IAAmCC,UAAUC,IAAjF,EAAuF;AACvFL,SAAOE,aAAP,CAAqBI,KAArB;AACD,CAHD;;AAKAN,OAAOO,oBAAP,GAA8B,UAASC,IAAT,EAAe;AAC3C,MAAIC,UAAUC,QAAV,CAAmBC,EAAnB,IAAyBH,KAAKI,GAAlC,EAAuC;AACvCZ,SAAOa,yBAAP,GAAmCC,YAAY,YAAM;AACnD,QAAIZ,cAAcC,UAAd,IAA4BC,UAAUC,IAA1C,EAAgD;AAChD,QAAMU,QAAQ;AACZC,aAAOC,KAAKC,GAAL,EADK;AAEZC,WAAK,eAFO;AAGZC,YAAM;AACJC,yBAAiBJ,KAAKC,GAAL;AADb;AAHM,KAAd;AAOAhB,kBAAcoB,IAAd,CAAmBC,KAAKC,SAAL,CAAeT,KAAf,CAAnB;AACD,GAVkC,EAUhCP,KAAKY,IAAL,CAAUK,cAVsB,CAAnC;AAWD,CAbD;;AAeAzB,OAAO0B,YAAP,GAAsB,UAASlB,IAAT,EAAe;AACnC,MAAIC,UAAUC,QAAV,CAAmBC,EAAnB,IAAyBH,KAAKI,GAAlC,EAAuC;AACzC;AACC,CAHD;;AAKAZ,OAAO2B,2BAAP,GAAqC,UAASC,QAAT,EAAmB;AACtD,MAAI5B,OAAOE,aAAP,IAAwBF,OAAOE,aAAP,CAAqBC,UAArB,IAAmCC,UAAUC,IAAzE,EAA+E;AAC7E,QAAI,QAAQuB,QAAZ,EACE;AACFA;AACA;AACD;;AAED,MAAMC,eAAeC,GAAGC,GAAH,CAAOC,YAAP,CAAoBC,UAApB,GAAiCV,KAAKW,KAAL,CAAWJ,GAAGC,GAAH,CAAOC,YAAP,CAAoBC,UAA/B,EAA2CJ,YAA5E,GAA2F,EAAhH;;AAEA,MAAMM,eAAeC,eAAeC,QAAf,CAAwBC,OAAxB,CAAgC,MAAhC,EAAwC,IAAxC,IAAgD,KAAhD,GAAwDF,eAAeG,IAAvE,GAA8E,GAA9E,GAAoFH,eAAeI,IAAnG,GAA0GJ,eAAeK,cAAzH,GAA0I,gBAA1I,GAA6JZ,YAAlL;AACA,MAAM3B,gBAAgB,IAAIE,SAAJ,CAAc+B,YAAd,CAAtB;;AAEAjC,gBAAcwC,MAAd,GAAuB,UAASC,KAAT,EAAgB;AACrCb,OAAGc,GAAH,CAAO,iCAAP;AACA5C,WAAOE,aAAP,GAAuBA,aAAvB;AACA,QAAI,QAAQ0B,QAAZ,EACE;AACFA;AACD,GAND;;AAQA1B,gBAAc2C,SAAd,GAA0B,UAASF,KAAT,EAAgB;AACxC,QAAMnC,OAAOe,KAAKW,KAAL,CAAWS,MAAMvB,IAAjB,CAAb;AACA,YAAQZ,KAAKW,GAAb;AACE,WAAK,uBAAL;AACEnB,eAAOO,oBAAP,CAA4BC,IAA5B;AACA;AACF,WAAK,eAAL;AACER,eAAO0B,YAAP,CAAoBlB,IAApB;AACA;AACF;AACE;AARJ;AAUD,GAZD;;AAcAN,gBAAc4C,OAAd,GAAwB,UAASH,KAAT,EAAgB;AACtCb,OAAGiB,KAAH,4CAAkDJ,KAAlD;AACA,QAAI,CAAC3C,OAAOgD,+BAAZ,EAA6C;AAC7ChD,WAAOgD,+BAAP;AACD,GAJD;;AAMA9C,gBAAc+C,OAAd,GAAwB,UAASN,KAAT,EAAgB;AACtCb,OAAGc,GAAH,sCAA0CD,KAA1C;AACA,QAAI,CAAC3C,OAAOgD,+BAAZ,EAA6C;AAC7ChD,WAAOgD,+BAAP;AACD,GAJD;AAKD,CA9CD","file":"WsSessionMgr.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["window.closeWSConnection = function() {\n  if (null == window.clientSession || window.clientSession.readyState != WebSocket.OPEN) return;\n  window.clientSession.close();\n}\n\nwindow.handleHbRequirements = function(resp) {\n  if (constants.RET_CODE.OK != resp.ret) return;\n  window.clientSessionPingInterval = setInterval(() => {\n    if (clientSession.readyState != WebSocket.OPEN) return;\n    const param = {\n      msgId: Date.now(),\n      act: \"HeartbeatPing\",\n      data: {\n        clientTimestamp: Date.now()\n      }\n    };\n    clientSession.send(JSON.stringify(param));\n  }, resp.data.intervalToPing);\n};\n\nwindow.handleHbPong = function(resp) {\n  if (constants.RET_CODE.OK != resp.ret) return;\n// TBD.\n};\n\nwindow.initPersistentSessionClient = function(onopenCb) {\n  if (window.clientSession && window.clientSession.readyState == WebSocket.OPEN) {\n    if (null == onopenCb)\n      return;\n    onopenCb();\n    return;\n  }\n\n  const intAuthToken = cc.sys.localStorage.selfPlayer ? JSON.parse(cc.sys.localStorage.selfPlayer).intAuthToken : \"\";\n\n  const urlToConnect = backendAddress.PROTOCOL.replace('http', 'ws') + '://' + backendAddress.HOST + \":\" + backendAddress.PORT + backendAddress.WS_PATH_PREFIX + \"?intAuthToken=\" + intAuthToken;\n  const clientSession = new WebSocket(urlToConnect);\n\n  clientSession.onopen = function(event) {\n    cc.log(\"The WS clientSession is opened.\");\n    window.clientSession = clientSession;\n    if (null == onopenCb)\n      return;\n    onopenCb();\n  };\n\n  clientSession.onmessage = function(event) {\n    const resp = JSON.parse(event.data)\n    switch (resp.act) {\n      case \"HeartbeatRequirements\":\n        window.handleHbRequirements(resp);\n        break;\n      case \"HeartbeatPong\":\n        window.handleHbPong(resp);\n        break;\n      default:\n        break;\n    }\n  };\n\n  clientSession.onerror = function(event) {\n    cc.error(`Error caught on the WS clientSession: ${event}`);\n    if (!window.handleClientSessionCloseOrError) return;\n    window.handleClientSessionCloseOrError();\n  };\n\n  clientSession.onclose = function(event) {\n    cc.log(`The WS clientSession is closed: ${event}`);\n    if (!window.handleClientSessionCloseOrError) return;\n    window.handleClientSessionCloseOrError();\n  };\n};\n\n"]}