{"version":3,"sources":["../../../../assets/scripts/assets/scripts/WsSessionMgr.js"],"names":["window","closeWSConnection","clientSession","readyState","WebSocket","OPEN","close","getBoundRoomIdFromPersistentStorage","cc","sys","localStorage","boundRoomId","clearBoundRoomIdInBothVolatileAndPersistentStorage","removeItem","handleHbRequirements","resp","constants","RET_CODE","OK","ret","data","clientSessionPingInterval","setInterval","param","msgId","Date","now","act","clientTimestamp","send","JSON","stringify","intervalToPing","handleHbPong","initPersistentSessionClient","onopenCb","intAuthToken","selfPlayer","parse","urlToConnect","backendAddress","PROTOCOL","replace","HOST","PORT","WS_PATH_PREFIX","onopen","event","log","onmessage","handleDownsyncRoomFrame","handleRoomJoinResp","onerror","error","clearInterval","handleClientSessionCloseOrError","onclose"],"mappings":"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","file":"WsSessionMgr.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["window.closeWSConnection = function() {\n  if (null == window.clientSession || window.clientSession.readyState != WebSocket.OPEN) return;\n  window.clientSession.close();\n}\n\nwindow.getBoundRoomIdFromPersistentStorage = function() {\n  return cc.sys.localStorage.boundRoomId;\n};\n\nwindow.clearBoundRoomIdInBothVolatileAndPersistentStorage = function() {\n  window.boundRoomId = null;\n  cc.sys.localStorage.removeItem(\"boundRoomId\");\n};\n\nwindow.boundRoomId = getBoundRoomIdFromPersistentStorage();\nwindow.handleHbRequirements = function(resp) {\n  if (constants.RET_CODE.OK != resp.ret) return;\n  if (null == window.boundRoomId) {\n    window.boundRoomId = resp.data.boundRoomId; \n    cc.sys.localStorage.boundRoomId = window.boundRoomId;\n  }\n\n  window.clientSessionPingInterval = setInterval(() => {\n    if (clientSession.readyState != WebSocket.OPEN) return;\n    const param = {\n      msgId: Date.now(),\n      act: \"HeartbeatPing\",\n      data: {\n        clientTimestamp: Date.now()\n      }\n    };\n    clientSession.send(JSON.stringify(param));\n  }, resp.data.intervalToPing);\n};\n\nwindow.handleHbPong = function(resp) {\n  if (constants.RET_CODE.OK != resp.ret) return;\n// TBD.\n};\n\nwindow.initPersistentSessionClient = function(onopenCb) {\n  if (window.clientSession && window.clientSession.readyState == WebSocket.OPEN) {\n    if (null == onopenCb)\n      return;\n    onopenCb();\n    return;\n  }\n\n  const intAuthToken = cc.sys.localStorage.selfPlayer ? JSON.parse(cc.sys.localStorage.selfPlayer).intAuthToken : \"\";\n\n  let urlToConnect = backendAddress.PROTOCOL.replace('http', 'ws') + '://' + backendAddress.HOST + \":\" + backendAddress.PORT + backendAddress.WS_PATH_PREFIX + \"?intAuthToken=\" + intAuthToken;\n\n  window.boundRoomId = getBoundRoomIdFromPersistentStorage();\n  if (null != window.boundRoomId) {\n    urlToConnect = urlToConnect + \"&boundRoomId=\" + window.boundRoomId;\n  }\n  const clientSession = new WebSocket(urlToConnect);\n\n  clientSession.onopen = function(event) {\n    cc.log(\"The WS clientSession is opened.\");\n    window.clientSession = clientSession;\n    if (null == onopenCb)\n      return;\n    onopenCb();\n  };\n\n  clientSession.onmessage = function(event) {\n    const resp = JSON.parse(event.data)\n    switch (resp.act) {\n      case \"HeartbeatRequirements\":\n        window.handleHbRequirements(resp);\n        break;\n      case \"HeartbeatPong\":\n        window.handleHbPong(resp);\n        break;\n      case \"RoomDownsyncFrame\":\n        if (window.handleDownsyncRoomFrame) {\n          window.handleDownsyncRoomFrame(resp.data);\n        }\n        break; \n      case \"Join\":\n        if (window.handleRoomJoinResp) {\n          window.handleRoomJoinResp(resp);\n        }\n        break;\n      default:\n        cc.log(`${JSON.stringify(resp)}`);\n        break;\n    }\n  };\n\n  clientSession.onerror = function(event) {\n    cc.error(`Error caught on the WS clientSession: ${event}`);\n    if (window.clientSessionPingInterval) {\n      clearInterval(clientSessionPingInterval);\n    }\n    if (window.handleClientSessionCloseOrError) {\n      window.handleClientSessionCloseOrError();\n    }\n  };\n\n  clientSession.onclose = function(event) {\n    cc.log(`The WS clientSession is closed: ${event}`);\n    if (window.clientSessionPingInterval) {\n      clearInterval(clientSessionPingInterval);\n    }\n    if (window.handleClientSessionCloseOrError) {\n      window.handleClientSessionCloseOrError();\n    }\n  };\n};\n\n"]}