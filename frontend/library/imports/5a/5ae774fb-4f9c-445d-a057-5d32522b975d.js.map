{"version":3,"sources":["../../../../assets/scripts/assets/scripts/ResultPanel.js"],"names":["i18n","require","init","window","language","cc","Class","extends","Component","properties","onCloseDelegate","type","Object","default","onAgainClicked","winnerPanel","Node","loserPanel","resultCompareNode","avatars","SpriteFrame","onLoad","resultPanelNode","node","againButtonNode","getChildByName","homeButtonNode","againBtnOnClick","evt","onClose","homeBtnOnClick","closeWSConnection","director","loadScene","showPlayerInfo","players","self","winnerNameNode","loserNameNode","compareProgressNode","winnerInfo","loserInfo","playerId","playerInfo","score","getComponent","Label","string","constants","PLAYER_NAME","joinIndex","progressComp","ProgressBar","winnerScore","parseInt","loserScore","ratio","Math","abs","progress","winnerAvatar","loserAvatar","Sprite","spriteFrame","showRibbon","ribbonNode","selfPlayerInfo","JSON","parse","sys","localStorage","selfPlayer","texture","id","loader","loadRes","err","console","log","parent","removeChild"],"mappings":"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","file":"ResultPanel.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["const i18n = require('LanguageData');\ni18n.init(window.language); // languageID should be equal to the one we input in New Language ID input field\ncc.Class({\n\n  extends: cc.Component,\n\n  properties: {\n    onCloseDelegate: {\n      type: cc.Object,\n      default: null\n    },\n    onAgainClicked: {\n      type: cc.Object,\n      default: null\n    },\n    winnerPanel: {\n      type: cc.Node,\n      default: null\n    },\n    loserPanel: {\n      type: cc.Node,\n      default: null\n    },\n    resultCompareNode: {\n      type: cc.Node,\n      default: null\n    },\n\n    avatars: {\n      type: [cc.SpriteFrame],\n      default: []\n    },\n  },\n\n  // LIFE-CYCLE CALLBACKS:\n\n  onLoad() {\n    const resultPanelNode = this.node;\n    const againButtonNode = resultPanelNode.getChildByName(\"againBtn\");  \n    const homeButtonNode = resultPanelNode.getChildByName(\"homeBtn\");  \n  },\n\n  againBtnOnClick(evt) {\n    this.onClose();\n    if (!this.onAgainClicked) return;\n    this.onAgainClicked();\n  },\n\n  homeBtnOnClick(evt) {\n    window.closeWSConnection();\n    cc.director.loadScene('login');\n  },\n\n  showPlayerInfo(players) {\n    const self = this;\n    const resultPanelNode = this.node;\n    const winnerNameNode = resultPanelNode.getChildByName(\"winnerName\");\n    const loserNameNode = resultPanelNode.getChildByName(\"loserName\");\n    const resultCompareNode = this.resultCompareNode;\n    const compareProgressNode = resultCompareNode.getChildByName(\"progressbar\");\n    let winnerInfo = null;\n    let loserInfo = null;\n    \n    for(let playerId in players) {\n      const playerInfo = players[playerId];\n      if(!winnerInfo) {\n        winnerInfo =  playerInfo; \n        continue;\n      }\n      if(playerInfo.score >= winnerInfo.score) {\n        loserInfo = winnerInfo;\n        winnerInfo = playerInfo;\n      }else {\n        loserInfo = playerInfo;\n      }\n    }\n    //TODO Hardecode the name\n    winnerNameNode.getComponent(cc.Label).string = constants.PLAYER_NAME[winnerInfo.joinIndex];\n    loserNameNode.getComponent(cc.Label).string = constants.PLAYER_NAME[loserInfo.joinIndex];\n  \n    const progressComp = compareProgressNode.getComponent(cc.ProgressBar);\n    const winnerScore = parseInt(winnerInfo.score);\n    const loserScore = parseInt(loserInfo.score); \n    let ratio = 0.5; \n    if(winnerScore != loserScore){\n      ratio = (loserScore * winnerScore <= 0) ? 1 \n              : Math.abs(winnerScore) / Math.abs((loserScore + winnerScore));\n    }\n    progressComp.progress = ratio; \n    \n    resultCompareNode.getChildByName(\"winnerScore\").getComponent(cc.Label).string = winnerScore;\n    resultCompareNode.getChildByName(\"loserScore\").getComponent(cc.Label).string = loserScore;\n    \n    /*\n   const plistDir = \"textures/StatusBar\";\n\n   cc.loader.loadRes(plistDir, cc.SpriteAtlas, function (err, altas) {\n    if(err){\n      cc.warn(err);\n      return;\n    }\n    //hardecode avatart by joinIndex\n    //let winnerAvatar = altas.getSpriteFrame(winnerInfo.joinIndex == 2 ? \"BlueAvatar\" : \"RedAvatar\")\n    //let loserAvatar = altas.getSpriteFrame(loserInfo.joinIndex == 2 ? \"BlueAvatar\" : \"RedAvatar\")\n    let winnerAvatar = self.avatars[winnerInfo.joinIndex == 2 ? 0 : 1]\n    let loserAvatar = self.avatars[loserInfo.joinIndex == 2 ? 0 : 1]\n    //let loserAvatar = altas.getSpriteFrame(loserInfo.joinIndex == 2 ? \"BlueAvatar\" : \"RedAvatar\")\n    resultPanelNode.getChildByName(\"winnerPortrait\").getComponent(cc.Sprite).spriteFrame = winnerAvatar;\n    resultPanelNode.getChildByName(\"loserPortrait\").getComponent(cc.Sprite).spriteFrame = loserAvatar;\n   });\n   */\n\n   let winnerAvatar = self.avatars[winnerInfo.joinIndex == 2 ? 1 : 0]\n   let loserAvatar = self.avatars[loserInfo.joinIndex == 2 ? 1 : 0]\n   //let loserAvatar = altas.getSpriteFrame(loserInfo.joinIndex == 2 ? \"BlueAvatar\" : \"RedAvatar\")\n   resultPanelNode.getChildByName(\"winnerPortrait\").getComponent(cc.Sprite).spriteFrame = winnerAvatar;\n   resultPanelNode.getChildByName(\"loserPortrait\").getComponent(cc.Sprite).spriteFrame = loserAvatar;\n\n   this.showRibbon(winnerInfo, resultPanelNode.getChildByName(\"ribbon\"));  \n  },\n \n  showRibbon(winnerInfo, ribbonNode) {\n    const selfPlayerInfo = JSON.parse(cc.sys.localStorage.selfPlayer);\n    const texture = (selfPlayerInfo.playerId == winnerInfo.id) ? \"textures/resultPanel/WinRibbon\" : \"textures/resultPanel/loseRibbon\";\n    cc.loader.loadRes(texture, cc.SpriteFrame, function (err, spriteFrame) {\n      if(err) {\n        console.log(err);\n        return;\n      }\n      ribbonNode.getComponent(cc.Sprite).spriteFrame = spriteFrame;\n    });\n\n  },\n  \n  onClose(evt) {\n    if (this.node.parent) {\n      this.node.parent.removeChild(this.node); \n    }\n    if (!this.onCloseDelegate) { \n      return;\n    }\n    this.onCloseDelegate();\n  }\n});\n"]}