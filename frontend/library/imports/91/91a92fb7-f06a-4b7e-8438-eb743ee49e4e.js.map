{"version":3,"sources":["../../../../assets/scripts/assets/scripts/TileCollisionManagerSingleton.js"],"names":["window","ALL_DISCRETE_DIRECTIONS_CLOCKWISE","dx","dy","TileCollisionManager","prototype","_continuousFromCentreOfDiscreteTile","tiledMapNode","tiledMapIns","layerIns","discretePosX","discretePosY","mapOrientation","getMapOrientation","mapTileRectilinearSize","getTileSize","mapAnchorOffset","cc","v2","tileSize","width","height","layerOffset","TiledMap","Orientation","ORTHO","ISO","tileSizeUnifiedLength","Math","sqrt","cosineThetaRadian","sineThetaRadian","getContentSize","getAnchorPoint","x","y","transMat","tmpContinuousX","parseFloat","tmpContinuousY","dContinuousXWrtMapNode","dContinuousYWrtMapNode","add","_continuousToDiscrete","continuousNewPosLocalToMap","continuousOldPosLocalToMap","convertedContinuousOldXInTileCoordinates","convertedContinuousOldYInTileCoordinates","convertedContinuousNewXInTileCoordinates","convertedContinuousNewYInTileCoordinates","oldWholeMultipleX","oldWholeMultipleY","newWholeMultipleX","newWholeMultipleY","exactBorderX","exactBorderY","oldTmpX","oldTmpY","newTmpX","newTmpY","floor","continuousMapNodeVecToContinuousObjLayerVec","withTiledMapNode","continuousMapNodeVec","getComponent","isometricObjectLayerPointOffsetScaleFactor","inverseIsometricObjectLayerPointOffsetScaleFactor","inverseTransMat","convertedVecX","convertedVecY","continuousObjLayerVecToContinuousMapNodeVec","continuousObjLayerVec","continuousObjLayerOffsetToContinuousMapNodePos","continuousObjLayerOffset","calibratedVec","continuousMapNodePosToContinuousObjLayerOffset","continuousMapNodePos","sub","extractBoundaryObjects","toRet","barriers","shelters","sheltersZReducer","loungeEntry","regions","frameAnimations","minigames","mapTileSize","file","_tmxFile","texValues","textures","texKeys","textureNames","texIdx","length","tsxFileNames","tsxFiles","tsxMap","tsxFilenameIdx","text","mapInfo","TMXMapInfo","tmxXmlStr","tileSets","getTilesets","gidBoundariesMap","tilesElListUnderTilesets","tsxOrientation","orientation","error","tsxXMLStr","selTileset","_parser","_parseXML","documentElement","firstGid","parseInt","getAttribute","currentTiles","getElementsByTagName","tileIdx","currentTile","parentGID","childrenOfCurrentTile","children","childIdx","ch","nodeName","currentObjectGroupUnderTile","_parseObjectGroup","oidx","_objects","oo","polylinePoints","boundaryType","boundary_type","brToPushTmp","bidx","push","shToPushTmp","shidx","shzrToPushTmp","shzridx","allObjectGroups","getObjectGroups","i","objectGroup","getProperty","allObjects","getObjects","j","object","gid","animationClipInfoForGid","getOrCreateAnimationClipForGid","posInMapNode","offset","origSize","sizeInMapNode","size","animationClip","toPushBarriers","k","toPushShelters","kk","toPushSheltersZReducer","kkk","toPushRegions","kkkk","regionName","name","points","toPushMinigame","minigameId","allLayers","getLayers","layerDOMTrees","mapDomTree","tmxAsset","mapDOMAllChildren","mdtIdx","tmpCh","_shouldIgnoreNode","currentTileLayer","currentTileset","getTileSet","currentLayerSize","getLayerSize","currentLayerTileSize","_tileSize","firstGidInCurrentTileset","discreteXInLayer","discreteYInLayer","currentGid","getTileGIDAt","gidBoundaries","centreOfAnchorTileInMapNode","topLeftOfWholeTsxTileInMapNode","theBarrier","tbidx","theShelter","tshidx","tshzridx","isOutOfMapNode","continuousPosLocalToMap","mapContentSize","getMapSize","tileCollisionManager"],"mappings":"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","file":"TileCollisionManagerSingleton.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["\"use strict\";\n\nwindow.ALL_DISCRETE_DIRECTIONS_CLOCKWISE = [{\n  dx: 0,\n  dy: 1\n}, {\n  dx: 2,\n  dy: 1\n}, {\n  dx: 2,\n  dy: 0\n}, {\n  dx: 2,\n  dy: -1\n}, {\n  dx: 0,\n  dy: -1\n}, {\n  dx: -2,\n  dy: -1\n}, {\n  dx: -2,\n  dy: 0\n}, {\n  dx: -2,\n  dy: 1\n}];\n\nfunction TileCollisionManager() { }\n\nTileCollisionManager.prototype._continuousFromCentreOfDiscreteTile = function (tiledMapNode, tiledMapIns, layerIns, discretePosX, discretePosY) {\n  var mapOrientation = tiledMapIns.getMapOrientation();\n  var mapTileRectilinearSize = tiledMapIns.getTileSize();\n  var mapAnchorOffset = cc.v2(0, 0);\n  var tileSize = {\n    width: 0,\n    height: 0\n  };\n  var layerOffset = cc.v2(0, 0);\n\n  switch (mapOrientation) {\n    case cc.TiledMap.Orientation.ORTHO:\n      return null;\n\n    case cc.TiledMap.Orientation.ISO:\n      var tileSizeUnifiedLength = Math.sqrt(mapTileRectilinearSize.width * mapTileRectilinearSize.width / 4 + mapTileRectilinearSize.height * mapTileRectilinearSize.height / 4);\n      tileSize = {\n        width: tileSizeUnifiedLength,\n        height: tileSizeUnifiedLength\n      };\n      var cosineThetaRadian = mapTileRectilinearSize.width / 2 / tileSizeUnifiedLength;\n      var sineThetaRadian = mapTileRectilinearSize.height / 2 / tileSizeUnifiedLength;\n      mapAnchorOffset = cc.v2(\n        tiledMapNode.getContentSize().width * (0.5 - tiledMapNode.getAnchorPoint().x),\n        tiledMapNode.getContentSize().height * (1 - tiledMapNode.getAnchorPoint().y)\n      );\n      layerOffset = cc.v2(0, 0);\n      var transMat = [\n        [cosineThetaRadian, -cosineThetaRadian],\n        [-sineThetaRadian, -sineThetaRadian]\n      ];\n      var tmpContinuousX = (parseFloat(discretePosX) + 0.5) * tileSizeUnifiedLength;\n      var tmpContinuousY = (parseFloat(discretePosY) + 0.5) * tileSizeUnifiedLength;\n      var dContinuousXWrtMapNode = transMat[0][0] * tmpContinuousX + transMat[0][1] * tmpContinuousY;\n      var dContinuousYWrtMapNode = transMat[1][0] * tmpContinuousX + transMat[1][1] * tmpContinuousY;\n      return cc.v2(dContinuousXWrtMapNode, dContinuousYWrtMapNode).add(mapAnchorOffset);\n\n    default:\n      return null;\n  }\n};\n\nTileCollisionManager.prototype._continuousToDiscrete = function (tiledMapNode, tiledMapIns, continuousNewPosLocalToMap, continuousOldPosLocalToMap) {\n  /*\n   * References\n   * - http://cocos2d-x.org/docs/api-ref/creator/v1.5/classes/TiledMap.html\n   * - http://cocos2d-x.org/docs/api-ref/creator/v1.5/classes/TiledLayer.html\n   * - http://docs.mapeditor.org/en/stable/reference/tmx-map-format/?highlight=orientation#map\n   */\n  var mapOrientation = tiledMapIns.getMapOrientation();\n  var mapTileRectilinearSize = tiledMapIns.getTileSize();\n  var mapAnchorOffset = {\n    x: 0,\n    y: 0\n  };\n  var tileSize = {\n    width: 0,\n    height: 0\n  };\n  var layerOffset = {\n    x: 0,\n    y: 0\n  };\n  var convertedContinuousOldXInTileCoordinates = null;\n  var convertedContinuousOldYInTileCoordinates = null;\n  var convertedContinuousNewXInTileCoordinates = null;\n  var convertedContinuousNewYInTileCoordinates = null;\n  var oldWholeMultipleX = 0;\n  var oldWholeMultipleY = 0;\n  var newWholeMultipleX = 0;\n  var newWholeMultipleY = 0;\n  var discretePosX = 0;\n  var discretePosY = 0;\n  var exactBorderX = 0;\n  var exactBorderY = 0; // These tmp variables are NOT NECESSARILY useful.\n\n  var oldTmpX = 0;\n  var oldTmpY = 0;\n  var newTmpX = 0;\n  var newTmpY = 0;\n\n  switch (mapOrientation) {\n    case cc.TiledMap.Orientation.ORTHO:\n      mapAnchorOffset = {\n        x: -(tiledMapNode.getContentSize().width * tiledMapNode.getAnchorPoint().x),\n        y: tiledMapNode.getContentSize().height * (1 - tiledMapNode.getAnchorPoint().y)\n      };\n      layerOffset = {\n        x: 0,\n        y: 0\n      };\n      tileSize = mapTileRectilinearSize;\n      convertedContinuousOldXInTileCoordinates = continuousOldPosLocalToMap.x - layerOffset.x - mapAnchorOffset.x;\n      convertedContinuousOldYInTileCoordinates = mapAnchorOffset.y - (continuousOldPosLocalToMap.y - layerOffset.y);\n      convertedContinuousNewXInTileCoordinates = continuousNewPosLocalToMap.x - layerOffset.x - mapAnchorOffset.x;\n      convertedContinuousNewYInTileCoordinates = mapAnchorOffset.y - (continuousNewPosLocalToMap.y - layerOffset.y);\n      break;\n\n    case cc.TiledMap.Orientation.ISO:\n      var tileSizeUnifiedLength = Math.sqrt(mapTileRectilinearSize.width * mapTileRectilinearSize.width / 4 + mapTileRectilinearSize.height * mapTileRectilinearSize.height / 4);\n      tileSize = {\n        width: tileSizeUnifiedLength,\n        height: tileSizeUnifiedLength\n      };\n      var cosineThetaRadian = mapTileRectilinearSize.width / 2 / tileSizeUnifiedLength;\n      var sineThetaRadian = mapTileRectilinearSize.height / 2 / tileSizeUnifiedLength;\n      mapAnchorOffset = {\n        x: tiledMapNode.getContentSize().width * (0.5 - tiledMapNode.getAnchorPoint().x),\n        y: tiledMapNode.getContentSize().height * (1 - tiledMapNode.getAnchorPoint().y)\n      };\n      layerOffset = {\n        x: 0,\n        y: 0\n      };\n      oldTmpX = continuousOldPosLocalToMap.x - layerOffset.x - mapAnchorOffset.x;\n      oldTmpY = continuousOldPosLocalToMap.y - layerOffset.y - mapAnchorOffset.y;\n      newTmpX = continuousNewPosLocalToMap.x - layerOffset.x - mapAnchorOffset.x;\n      newTmpY = continuousNewPosLocalToMap.y - layerOffset.y - mapAnchorOffset.y;\n      var transMat = [[1 / (2 * cosineThetaRadian), -1 / (2 * sineThetaRadian)], [-1 / (2 * cosineThetaRadian), -1 / (2 * sineThetaRadian)]];\n      convertedContinuousOldXInTileCoordinates = transMat[0][0] * oldTmpX + transMat[0][1] * oldTmpY;\n      convertedContinuousOldYInTileCoordinates = transMat[1][0] * oldTmpX + transMat[1][1] * oldTmpY;\n      convertedContinuousNewXInTileCoordinates = transMat[0][0] * newTmpX + transMat[0][1] * newTmpY;\n      convertedContinuousNewYInTileCoordinates = transMat[1][0] * newTmpX + transMat[1][1] * newTmpY;\n      break;\n\n    default:\n      break;\n  }\n\n  if (null == convertedContinuousOldXInTileCoordinates || null == convertedContinuousOldYInTileCoordinates || null == convertedContinuousNewXInTileCoordinates || null == convertedContinuousNewYInTileCoordinates) {\n    return null;\n  }\n\n  oldWholeMultipleX = Math.floor(convertedContinuousOldXInTileCoordinates / tileSize.width);\n  oldWholeMultipleY = Math.floor(convertedContinuousOldYInTileCoordinates / tileSize.height);\n  newWholeMultipleX = Math.floor(convertedContinuousNewXInTileCoordinates / tileSize.width);\n  newWholeMultipleY = Math.floor(convertedContinuousNewYInTileCoordinates / tileSize.height); // Mind that the calculation of `exactBorderY` is different for `convertedContinuousOldYInTileCoordinates <> convertedContinuousNewYInTileCoordinates`. \n\n  if (convertedContinuousOldYInTileCoordinates < convertedContinuousNewYInTileCoordinates) {\n    exactBorderY = newWholeMultipleY * tileSize.height;\n\n    if (convertedContinuousNewYInTileCoordinates > exactBorderY && convertedContinuousOldYInTileCoordinates <= exactBorderY) {\n      // Will try to cross the border if (newWholeMultipleY != oldWholeMultipleY).\n      discretePosY = newWholeMultipleY;\n    } else {\n      discretePosY = oldWholeMultipleY;\n    }\n  } else if (convertedContinuousOldYInTileCoordinates > convertedContinuousNewYInTileCoordinates) {\n    exactBorderY = oldWholeMultipleY * tileSize.height;\n\n    if (convertedContinuousNewYInTileCoordinates < exactBorderY && convertedContinuousOldYInTileCoordinates >= exactBorderY) {\n      // Will try to cross the border if (newWholeMultipleY != oldWholeMultipleY).\n      discretePosY = newWholeMultipleY;\n    } else {\n      discretePosY = oldWholeMultipleY;\n    }\n  } else {\n    discretePosY = oldWholeMultipleY;\n  } // Mind that the calculation of `exactBorderX` is different for `convertedContinuousOldXInTileCoordinates <> convertedContinuousNewXInTileCoordinates`. \n\n\n  if (convertedContinuousOldXInTileCoordinates < convertedContinuousNewXInTileCoordinates) {\n    exactBorderX = newWholeMultipleX * tileSize.width;\n\n    if (convertedContinuousNewXInTileCoordinates > exactBorderX && convertedContinuousOldXInTileCoordinates <= exactBorderX) {\n      // Will cross the border if (newWholeMultipleX != oldWholeMultipleX).\n      discretePosX = newWholeMultipleX;\n    } else {\n      discretePosX = oldWholeMultipleX;\n    }\n  } else if (convertedContinuousOldXInTileCoordinates > convertedContinuousNewXInTileCoordinates) {\n    exactBorderX = oldWholeMultipleX * tileSize.width;\n\n    if (convertedContinuousNewXInTileCoordinates < exactBorderX && convertedContinuousOldXInTileCoordinates >= exactBorderX) {\n      // Will cross the border if (newWholeMultipleX != oldWholeMultipleX).\n      discretePosX = newWholeMultipleX;\n    } else {\n      discretePosX = oldWholeMultipleX;\n    }\n  } else {\n    discretePosX = oldWholeMultipleX;\n  }\n\n  return {\n    x: discretePosX,\n    y: discretePosY\n  };\n};\n\nTileCollisionManager.prototype.continuousMapNodeVecToContinuousObjLayerVec = function (withTiledMapNode, continuousMapNodeVec) {\n  var tiledMapIns = withTiledMapNode.getComponent(cc.TiledMap);\n\n  var mapOrientation = tiledMapIns.getMapOrientation();\n  var mapTileRectilinearSize = tiledMapIns.getTileSize();\n\n  switch (mapOrientation) {\n    case cc.TiledMap.Orientation.ORTHO:\n      // TODO\n      return null;\n\n    case cc.TiledMap.Orientation.ISO:\n      var tileSizeUnifiedLength = Math.sqrt(mapTileRectilinearSize.width * mapTileRectilinearSize.width * 0.25 + mapTileRectilinearSize.height * mapTileRectilinearSize.height * 0.25);\n      var isometricObjectLayerPointOffsetScaleFactor = (tileSizeUnifiedLength / mapTileRectilinearSize.height);\n      var inverseIsometricObjectLayerPointOffsetScaleFactor = 1 / isometricObjectLayerPointOffsetScaleFactor;\n\n      var cosineThetaRadian = (mapTileRectilinearSize.width * 0.5) / tileSizeUnifiedLength;\n      var sineThetaRadian = (mapTileRectilinearSize.height * 0.5) / tileSizeUnifiedLength;\n\n      var inverseTransMat = [\n        [inverseIsometricObjectLayerPointOffsetScaleFactor * 0.5 * (1 / cosineThetaRadian), - inverseIsometricObjectLayerPointOffsetScaleFactor * 0.5 * (1 / sineThetaRadian)],\n        [- inverseIsometricObjectLayerPointOffsetScaleFactor * 0.5 * (1 / cosineThetaRadian), - inverseIsometricObjectLayerPointOffsetScaleFactor * 0.5 * (1 / sineThetaRadian)]\n      ];\n      var convertedVecX = inverseTransMat[0][0] * continuousMapNodeVec.x + inverseTransMat[0][1] * continuousMapNodeVec.y;\n      var convertedVecY = inverseTransMat[1][0] * continuousMapNodeVec.x + inverseTransMat[1][1] * continuousMapNodeVec.y;\n\n      return cc.v2(convertedVecX, convertedVecY);\n\n    default:\n      return null;\n  }\n}\n\nTileCollisionManager.prototype.continuousObjLayerVecToContinuousMapNodeVec = function (withTiledMapNode, continuousObjLayerVec) {\n  var tiledMapIns = withTiledMapNode.getComponent(cc.TiledMap);\n\n  var mapOrientation = tiledMapIns.getMapOrientation();\n  var mapTileRectilinearSize = tiledMapIns.getTileSize();\n\n  switch (mapOrientation) {\n    case cc.TiledMap.Orientation.ORTHO:\n      // TODO\n      return null;\n\n    case cc.TiledMap.Orientation.ISO:\n      var tileSizeUnifiedLength = Math.sqrt(mapTileRectilinearSize.width * mapTileRectilinearSize.width * 0.25 + mapTileRectilinearSize.height * mapTileRectilinearSize.height * 0.25);\n      var isometricObjectLayerPointOffsetScaleFactor = (tileSizeUnifiedLength / mapTileRectilinearSize.height);\n\n      var cosineThetaRadian = (mapTileRectilinearSize.width * 0.5) / tileSizeUnifiedLength;\n      var sineThetaRadian = (mapTileRectilinearSize.height * 0.5) / tileSizeUnifiedLength;\n\n      var transMat = [\n        [isometricObjectLayerPointOffsetScaleFactor * cosineThetaRadian, - isometricObjectLayerPointOffsetScaleFactor * cosineThetaRadian],\n        [- isometricObjectLayerPointOffsetScaleFactor * sineThetaRadian, - isometricObjectLayerPointOffsetScaleFactor * sineThetaRadian]\n      ];\n      var convertedVecX = transMat[0][0] * continuousObjLayerVec.x + transMat[0][1] * continuousObjLayerVec.y;\n      var convertedVecY = transMat[1][0] * continuousObjLayerVec.x + transMat[1][1] * continuousObjLayerVec.y;\n\n      return cc.v2(convertedVecX, convertedVecY);\n\n    default:\n      return null;\n  }\n}\n\nTileCollisionManager.prototype.continuousObjLayerOffsetToContinuousMapNodePos = function (withTiledMapNode, continuousObjLayerOffset) {\n  var tiledMapIns = withTiledMapNode.getComponent(cc.TiledMap);\n\n  var mapOrientation = tiledMapIns.getMapOrientation();\n  var mapTileRectilinearSize = tiledMapIns.getTileSize();\n\n  switch (mapOrientation) {\n    case cc.TiledMap.Orientation.ORTHO:\n      // TODO\n      return null;\n\n    case cc.TiledMap.Orientation.ISO:\n      var calibratedVec = continuousObjLayerOffset; // TODO: Respect the real offsets!\n\n      // The immediately following statement takes a magic assumption that the anchor of `withTiledMapNode` is (0.5, 0.5) which is NOT NECESSARILY true.\n      var layerOffset = cc.v2(0, +(withTiledMapNode.getContentSize().height * 0.5));\n\n      return layerOffset.add(this.continuousObjLayerVecToContinuousMapNodeVec(withTiledMapNode, calibratedVec));\n\n    default:\n      return null;\n  }\n}\n\nTileCollisionManager.prototype.continuousMapNodePosToContinuousObjLayerOffset = function (withTiledMapNode, continuousMapNodePos) {\n  var tiledMapIns = withTiledMapNode.getComponent(cc.TiledMap);\n\n  var mapOrientation = tiledMapIns.getMapOrientation();\n  var mapTileRectilinearSize = tiledMapIns.getTileSize();\n\n  switch (mapOrientation) {\n    case cc.TiledMap.Orientation.ORTHO:\n      // TODO\n      return null;\n\n    case cc.TiledMap.Orientation.ISO:\n      // The immediately following statement takes a magic assumption that the anchor of `withTiledMapNode` is (0.5, 0.5) which is NOT NECESSARILY true.\n      var layerOffset = cc.v2(0, +(withTiledMapNode.getContentSize().height * 0.5));\n      var calibratedVec = continuousMapNodePos.sub(layerOffset); // TODO: Respect the real offsets!\n      return this.continuousMapNodeVecToContinuousObjLayerVec(withTiledMapNode, calibratedVec);\n\n    default:\n      return null;\n  }\n}\n\n/**\n * Note that `TileCollisionManager.extractBoundaryObjects` returns everything with coordinates local to `withTiledMapNode`!\n */\nTileCollisionManager.prototype.extractBoundaryObjects = function (withTiledMapNode) {\n  var toRet = {\n    barriers: [],\n    shelters: [],\n    sheltersZReducer: [],\n    loungeEntry: [],\n    regions: [],\n    frameAnimations: [],\n    minigames: []\n  };\n  var tiledMapIns = withTiledMapNode.getComponent(cc.TiledMap); // This is a magic name.\n  var mapTileSize = tiledMapIns.getTileSize();\n  var mapOrientation = tiledMapIns.getMapOrientation();\n\n  /*\n   * Copies from https://github.com/cocos-creator/engine/blob/master/cocos2d/tilemap/CCTiledMap.js as a hack to parse advanced <tile> info\n   * of a TSX file. [BEGINS]\n   */\n  var file = tiledMapIns._tmxFile;\n  var texValues = file.textures;\n  var texKeys = file.textureNames;\n  var textures = {};\n  for (var texIdx = 0; texIdx < texValues.length; ++texIdx) {\n    textures[texKeys[texIdx]] = texValues[texIdx];\n  }\n\n  var tsxFileNames = file.tsxFileNames;\n  var tsxFiles = file.tsxFiles;\n  var tsxMap = {};\n  for (var tsxFilenameIdx = 0; tsxFilenameIdx < tsxFileNames.length; ++tsxFilenameIdx) {\n    if (0 >= tsxFileNames[tsxFilenameIdx].length) continue;\n    tsxMap[tsxFileNames[tsxFilenameIdx]] = tsxFiles[tsxFilenameIdx].text;\n  }\n\n  var mapInfo = new cc.TMXMapInfo(file.tmxXmlStr, tsxMap, textures);\n  var tileSets = mapInfo.getTilesets();\n  /*\n   * Copies from https://github.com/cocos-creator/engine/blob/master/cocos2d/tilemap/CCTiledMap.js as a hack to parse advanced <tile> info\n   * of a TSX file. [ENDS]\n   */\n  var gidBoundariesMap = {};\n  var tilesElListUnderTilesets = {};\n  for (var tsxFilenameIdx = 0; tsxFilenameIdx < tsxFileNames.length; ++tsxFilenameIdx) {\n\n    var tsxOrientation = tileSets[tsxFilenameIdx].orientation;\n    if (cc.TiledMap.Orientation.ORTHO == tsxOrientation) {\n      cc.error(\"Error at tileset %s: We proceed with ONLY tilesets in ORTHO orientation for all map orientations by now.\", tsxFileNames[tsxFilenameIdx]);\n      continue;\n    };\n\n    var tsxXMLStr = tsxMap[tsxFileNames[tsxFilenameIdx]];\n    var selTileset = mapInfo._parser._parseXML(tsxXMLStr).documentElement;\n    var firstGid = (parseInt(selTileset.getAttribute('firstgid')) || tileSets[tsxFilenameIdx].firstGid || 0);\n    var currentTiles = selTileset.getElementsByTagName('tile');\n    if (!currentTiles) continue;\n    tilesElListUnderTilesets[tsxFileNames[tsxFilenameIdx]] = currentTiles;\n\n    for (var tileIdx = 0; tileIdx < currentTiles.length; ++tileIdx) {\n      var currentTile = currentTiles[tileIdx];\n      var parentGID = parseInt(firstGid) + parseInt(currentTile.getAttribute('id') || 0);\n      var childrenOfCurrentTile = currentTile.children;\n      for (var childIdx = 0; childIdx < childrenOfCurrentTile.length; ++childIdx) {\n        var ch = childrenOfCurrentTile[childIdx];\n        if (!(ch.nodeName === 'objectgroup')) continue;\n        var currentObjectGroupUnderTile = mapInfo._parseObjectGroup(ch);\n        gidBoundariesMap[parentGID] = {\n          barriers: [],\n          shelters: [],\n          sheltersZReducer: [],\n          loungeEntry: [],\n        };\n        for (var oidx = 0; oidx < currentObjectGroupUnderTile._objects.length; ++oidx) {\n          var oo = currentObjectGroupUnderTile._objects[oidx];\n          var polylinePoints = oo.polylinePoints;\n          if (!polylinePoints) continue;\n          var boundaryType = oo.boundary_type;\n          switch (boundaryType) {\n            case \"barrier\":\n              var brToPushTmp = [];\n              for (var bidx = 0; bidx < polylinePoints.length; ++bidx) {\n                brToPushTmp.push(cc.v2(oo.x, oo.y).add(polylinePoints[bidx]));\n              }\n              gidBoundariesMap[parentGID].barriers.push(brToPushTmp);\n              break;\n            case \"shelter\":\n              var shToPushTmp = [];\n              for (var shidx = 0; shidx < polylinePoints.length; ++shidx) {\n                shToPushTmp.push(cc.v2(oo.x, oo.y).add(polylinePoints[shidx]));\n              }\n              gidBoundariesMap[parentGID].shelters.push(shToPushTmp);\n              break;\n            case \"shelter_z_reducer\":\n              var shzrToPushTmp = [];\n              for (var shzridx = 0; shzridx < polylinePoints.length; ++shzridx) {\n                shzrToPushTmp.push(cc.v2(oo.x, oo.y).add(polylinePoints[shzridx]));\n              }\n              gidBoundariesMap[parentGID].sheltersZReducer.push(shzrToPushTmp);\n              break;\n            default:\n              break;\n          }\n        }\n      }\n    }\n  }\n  // Reference http://docs.cocos.com/creator/api/en/classes/TiledMap.html.\n  var allObjectGroups = tiledMapIns.getObjectGroups();\n\n  for (var i = 0; i < allObjectGroups.length; ++i) {\n    // Reference http://docs.cocos.com/creator/api/en/classes/TiledObjectGroup.html.\n    var objectGroup = allObjectGroups[i];\n    if (\"frame_anim\" != objectGroup.getProperty(\"type\")) continue;\n    var allObjects = objectGroup.getObjects();\n    for (var j = 0; j < allObjects.length; ++j) {\n      var object = allObjects[j];\n      var gid = object.gid;\n      if (!gid || gid <= 0) {\n        continue;\n      }\n      var animationClipInfoForGid = getOrCreateAnimationClipForGid(gid, mapInfo, tilesElListUnderTilesets);\n      if (!animationClipInfoForGid) continue;\n      toRet.frameAnimations.push({\n        posInMapNode: this.continuousObjLayerOffsetToContinuousMapNodePos(withTiledMapNode, object.offset),\n        origSize: animationClipInfoForGid.origSize,\n        sizeInMapNode: cc.size(object.width, object.height),\n        animationClip: animationClipInfoForGid.animationClip\n      });\n    }\n  }\n  for (var i = 0; i < allObjectGroups.length; ++i) {\n    var objectGroup = allObjectGroups[i];\n    if (\"barrier_and_shelter\" != objectGroup.getProperty(\"type\")) continue;\n    var allObjects = objectGroup.getObjects();\n    for (var j = 0; j < allObjects.length; ++j) {\n      var object = allObjects[j];\n      var gid = object.gid;\n      if (gid > 0) {\n        continue;\n      }\n      var polylinePoints = object.polylinePoints;\n      if (!polylinePoints) {\n        continue\n      }\n      var boundaryType = object.boundary_type;\n      switch (boundaryType) {\n        case \"barrier\":\n          var toPushBarriers = [];\n          for (var k = 0; k < polylinePoints.length; ++k) {\n            toPushBarriers.push(this.continuousObjLayerOffsetToContinuousMapNodePos(withTiledMapNode, object.offset.add(polylinePoints[k])));\n          }\n          toRet.barriers.push(toPushBarriers);\n          break;\n        case \"shelter\":\n          var toPushShelters = [];\n          for (var kk = 0; kk < polylinePoints.length; ++kk) {\n            toPushShelters.push(this.continuousObjLayerOffsetToContinuousMapNodePos(withTiledMapNode, object.offset.add(polylinePoints[kk])));\n          }\n          toRet.shelters.push(toPushShelters);\n          break;\n        case \"shelter_z_reducer\":\n          var toPushSheltersZReducer = [];\n          for (var kkk = 0; kkk < polylinePoints.length; ++kkk) {\n            toPushSheltersZReducer.push(this.continuousObjLayerOffsetToContinuousMapNodePos(withTiledMapNode, object.offset.add(polylinePoints[kkk])));\n          }\n          toRet.sheltersZReducer.push(toPushSheltersZReducer);\n          break;\n        case \"region\":\n          var toPushRegions = [];\n          for (var kkkk = 0; kkkk < polylinePoints.length; ++kkkk) {\n            toPushRegions.push(this.continuousObjLayerOffsetToContinuousMapNodePos(withTiledMapNode, object.offset.add(polylinePoints[kkkk])));\n          }\n          toRet.regions.push({\n            regionName: object.name,\n            points: toPushRegions\n          });\n          break;\n        case \"minigame\":\n          var toPushMinigame = [];\n          for (var kkkk = 0; kkkk < polylinePoints.length; ++kkkk) {\n            toPushMinigame.push(this.continuousObjLayerOffsetToContinuousMapNodePos(withTiledMapNode, object.offset.add(polylinePoints[kkkk])));\n          }\n          toRet.minigames.push({\n            minigameId: object.minigameId,\n            points: toPushMinigame\n          });\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  var mapTileSize = tiledMapIns.getTileSize();\n  var allLayers = tiledMapIns.getLayers();\n\n  var layerDOMTrees = [];\n  var mapDomTree = mapInfo._parser._parseXML(tiledMapIns.tmxAsset.tmxXmlStr).documentElement;\n  var mapDOMAllChildren = mapDomTree.children;\n  for (var mdtIdx = 0; mdtIdx < mapDOMAllChildren.length; ++mdtIdx) {\n    var tmpCh = mapDOMAllChildren[mdtIdx];\n    if (mapInfo._shouldIgnoreNode(tmpCh)) {\n      continue;\n    }\n\n    if (tmpCh.nodeName != 'layer') {\n      continue;\n    }\n    layerDOMTrees.push(tmpCh);\n  }\n  for (var j = 0; j < allLayers.length; ++j) {\n    // TODO: Respect layer offset!\n    var currentTileLayer = allLayers[j];\n    var currentTileset = currentTileLayer.getTileSet();\n\n    if (!currentTileset) {\n      continue;\n    }\n\n    var currentLayerSize = currentTileLayer.getLayerSize();\n\n    var currentLayerTileSize = currentTileset._tileSize;\n    var firstGidInCurrentTileset = currentTileset.firstGid;\n\n    /*\n    if ((0 != currentLayerTileSize.width % mapTileSize.width) || (0 != currentLayerTileSize.height % mapTileSize.height)) {\n      cc.error(\"TileSize of tileSet %s is not a multiple of the mapTileSize.\", currentTileset.name); \n    }\n    */\n\n    for (var discreteXInLayer = 0; discreteXInLayer < currentLayerSize.width; ++discreteXInLayer) {\n      for (var discreteYInLayer = 0; discreteYInLayer < currentLayerSize.height; ++discreteYInLayer) {\n        var currentGid = currentTileLayer.getTileGIDAt(discreteXInLayer, discreteYInLayer);\n        if (0 >= currentGid) continue;\n        var gidBoundaries = gidBoundariesMap[currentGid];\n        if (!gidBoundaries) continue;\n        switch (mapOrientation) {\n          case cc.TiledMap.Orientation.ORTHO:\n            // TODO\n            return toRet;\n\n          case cc.TiledMap.Orientation.ISO:\n            var centreOfAnchorTileInMapNode = this._continuousFromCentreOfDiscreteTile(withTiledMapNode, tiledMapIns, currentTileLayer, discreteXInLayer, discreteYInLayer);\n            var topLeftOfWholeTsxTileInMapNode = centreOfAnchorTileInMapNode.add(cc.v2(-0.5 * mapTileSize.width, currentLayerTileSize.height - 0.5 * mapTileSize.height));\n            for (var bidx = 0; bidx < gidBoundaries.barriers.length; ++bidx) {\n              var theBarrier = gidBoundaries.barriers[bidx]; // An array of cc.v2 points.\n              var brToPushTmp = [];\n              for (var tbidx = 0; tbidx < theBarrier.length; ++tbidx) {\n                brToPushTmp.push(topLeftOfWholeTsxTileInMapNode.add(cc.v2(theBarrier[tbidx].x, -theBarrier[tbidx].y /* Mind the reverse y-axis here. */)));\n              }\n              toRet.barriers.push(brToPushTmp);\n            }\n            for (var shidx = 0; shidx < gidBoundaries.shelters.length; ++shzridx) {\n              var theShelter = gidBoundaries.shelters[shidx]; // An array of cc.v2 points.\n              var shToPushTmp = [];\n              for (var tshidx = 0; tshidx < theShelter.length; ++tshidx) {\n                shToPushTmp.push(topLeftOfWholeTsxTileInMapNode.add(cc.v2(theShelter[tshidx].x, -theShelter[tshidx].y)));\n              }\n              toRet.shelters.push(shToPushTmp);\n            }\n            for (var shzridx = 0; shzridx < gidBoundaries.sheltersZReducer.length; ++shzridx) {\n              var theShelter = gidBoundaries.sheltersZReducer[shzridx]; // An array of cc.v2 points.\n              var shzrToPushTmp = [];\n              for (var tshzridx = 0; tshzridx < theShelter.length; ++tshzridx) {\n                shzrToPushTmp.push(topLeftOfWholeTsxTileInMapNode.add(cc.v2(theShelter[tshzridx].x, -theShelter[tshzridx].y)));\n              }\n              toRet.sheltersZReducer.push(shzrToPushTmp);\n            }\n            \n            continue;\n\n          default:\n            return toRet;\n        }\n      }\n    }\n  }\n  return toRet;\n}\n\nTileCollisionManager.prototype.isOutOfMapNode = function (tiledMapNode, continuousPosLocalToMap) {\n  var tiledMapIns = tiledMapNode.getComponent(cc.TiledMap); // This is a magic name.\n\n  var mapOrientation = tiledMapIns.getMapOrientation();\n  var mapTileRectilinearSize = tiledMapIns.getTileSize();\n\n  var mapContentSize = cc.size(tiledMapIns.getTileSize().width * tiledMapIns.getMapSize().width, tiledMapIns.getTileSize().height * tiledMapIns.getMapSize().height);\n\n  switch (mapOrientation) {\n    case cc.TiledMap.Orientation.ORTHO:\n      // TODO\n      return true;\n\n    case cc.TiledMap.Orientation.ISO:\n      var continuousObjLayerOffset = this.continuousMapNodePosToContinuousObjLayerOffset(tiledMapNode, continuousPosLocalToMap);\n      return 0 > continuousObjLayerOffset.x || 0 > continuousObjLayerOffset.y || mapContentSize.width < continuousObjLayerOffset.x || mapContentSize.height < continuousObjLayerOffset.y;\n\n    default:\n      return true;\n  }\n  return true;\n};\n\nwindow.tileCollisionManager = new TileCollisionManager();\n"]}