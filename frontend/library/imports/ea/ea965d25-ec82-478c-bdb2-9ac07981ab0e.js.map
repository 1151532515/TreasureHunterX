{"version":3,"sources":["../../../../assets/scripts/assets/scripts/Bullet.js"],"names":["module","export","cc","Class","extends","Component","properties","localIdInBattle","default","linearSpeed","activeDirection","onLoad","dx","dy","_calculateVecToMoveByWithChosenDir","elapsedTime","sDir","v2","self","distanceToMove","denominator","Math","sqrt","unitProjDx","unitProjDy","_calculateVecToMoveBy","_canMoveBy","vecToMoveBy","update","dt","node","position","add"],"mappings":";;;;;;AAACA,OAAOC,MAAP,GAAgBC,GAAGC,KAAH,CAAS;AACxBC,WAASF,GAAGG,SADY;;AAGxBC,cAAY;AACVC,qBAAiB;AACfC,eAAS;AADM,KADP;AAIVC,iBAAa;AACXD,eAAS;AADE,KAJH;AAOVE,qBAAiB;AACfF,eAAS;AADM;AAPP,GAHY;;AAexBG,QAfwB,oBAef;AACP,QAAI,QAAQ,KAAKD,eAAjB,EAAkC;AAChC,WAAKA,eAAL,GAAuB;AACrBE,YAAI,GADiB;AAErBC,YAAI;AAFiB,OAAvB;AAID;AACF,GAtBuB;AAwBxBC,oCAxBwB,8CAwBWC,WAxBX,EAwBwBC,IAxBxB,EAwB8B;AACpD,QAAI,KAAKA,KAAKJ,EAAV,IAAgB,KAAKI,KAAKH,EAA9B,EAAkC;AAChC,aAAOX,GAAGe,EAAH,EAAP;AACD;AACD,QAAMC,OAAO,IAAb;AACA,QAAMC,iBAAkBD,KAAKT,WAAL,GAAmBM,WAA3C;AACA,QAAMK,cAAcC,KAAKC,IAAL,CAAUN,KAAKJ,EAAL,GAAUI,KAAKJ,EAAf,GAAoBI,KAAKH,EAAL,GAAUG,KAAKH,EAA7C,CAApB;AACA,QAAMU,aAAcP,KAAKJ,EAAL,GAAUQ,WAA9B;AACA,QAAMI,aAAcR,KAAKH,EAAL,GAAUO,WAA9B;AACA,WAAOlB,GAAGe,EAAH,CACLE,iBAAiBI,UADZ,EAELJ,iBAAiBK,UAFZ,CAAP;AAID,GArCuB;AAuCxBC,uBAvCwB,iCAuCFV,WAvCE,EAuCW;AACjC,QAAMG,OAAO,IAAb;AACA;AACA,QAAIF,OAAO;AACTJ,UAAIM,KAAKR,eAAL,CAAqBE,EADhB;AAETC,UAAIK,KAAKR,eAAL,CAAqBG;AAFhB,KAAX;;AAKA,QAAI,KAAKG,KAAKJ,EAAV,IAAgB,KAAKI,KAAKH,EAA9B,EAAkC;AAChC,aAAOX,GAAGe,EAAH,EAAP;AACD;;AAED,WAAOC,KAAKJ,kCAAL,CAAwCC,WAAxC,EAAqDC,IAArD,CAAP;AACD,GApDuB;AAsDxBU,YAtDwB,sBAsDbC,WAtDa,EAsDA;AACtB,WAAO,IAAP;AACD,GAxDuB;AA0DxBC,QA1DwB,kBA0DjBC,EA1DiB,EA0Db;AACT,QAAMX,OAAO,IAAb;AACA,QAAMS,cAAcT,KAAKO,qBAAL,CAA2BI,EAA3B,CAApB;AACA,QAAIX,KAAKQ,UAAL,CAAgBC,WAAhB,CAAJ,EAAkC;AAChCT,WAAKY,IAAL,CAAUC,QAAV,GAAqBb,KAAKY,IAAL,CAAUC,QAAV,CAAmBC,GAAnB,CAAuBL,WAAvB,CAArB;AACD;AACF;AAhEuB,CAAT,CAAhB","file":"Bullet.js","sourceRoot":"../../../../assets/scripts","sourcesContent":[" module.export = cc.Class({\n  extends: cc.Component,\n\n  properties: {\n    localIdInBattle: {\n      default: null, \n    },\n    linearSpeed: {\n      default: 0.0,\n    },\n    activeDirection: {\n      default: null, \n    }, \n  },\n\n  onLoad() {\n    if (null == this.activeDirection) {\n      this.activeDirection = {\n        dx: 0.0,\n        dy: 0.0,\n      };\n    } \n  },\n\n  _calculateVecToMoveByWithChosenDir(elapsedTime, sDir) {\n    if (0 == sDir.dx && 0 == sDir.dy) {\n      return cc.v2();\n    }\n    const self = this;\n    const distanceToMove = (self.linearSpeed * elapsedTime);\n    const denominator = Math.sqrt(sDir.dx * sDir.dx + sDir.dy * sDir.dy);\n    const unitProjDx = (sDir.dx / denominator);\n    const unitProjDy = (sDir.dy / denominator);\n    return cc.v2(\n      distanceToMove * unitProjDx,\n      distanceToMove * unitProjDy,\n    );\n  },\n\n  _calculateVecToMoveBy(elapsedTime) {\n    const self = this;\n    // Note that `sDir` used in this method MUST BE a copy in RAM.\n    let sDir = {\n      dx: self.activeDirection.dx,\n      dy: self.activeDirection.dy,\n    };\n\n    if (0 == sDir.dx && 0 == sDir.dy) {\n      return cc.v2();\n    }\n\n    return self._calculateVecToMoveByWithChosenDir(elapsedTime, sDir);\n  },\n\n  _canMoveBy(vecToMoveBy) {\n    return true;\n  },\n\n  update(dt) {\n    const self = this;\n    const vecToMoveBy = self._calculateVecToMoveBy(dt);\n    if (self._canMoveBy(vecToMoveBy)) {\n      self.node.position = self.node.position.add(vecToMoveBy);\n    }\n  },\n});\n"]}