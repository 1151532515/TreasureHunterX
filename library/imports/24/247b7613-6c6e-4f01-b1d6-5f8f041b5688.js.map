{"version":3,"sources":["..\\..\\..\\..\\assets\\scripts/assets\\scripts\\Heap.js"],"names":["BinaryHeap","customCompare","list","compare","prototype","buildHeap","keys","values","length","Error","nodeArray","i","push","Node","undefined","buildHeapFromNodeArray","clear","extractMinimum","shift","min","pop","heapify","findMinimum","isEmpty","insert","key","value","node","parent","getParent","swap","size","union","otherHeap","array","concat","a","b","heap","l","getLeft","r","getRight","smallest","Math","floor","temp","module","exports"],"mappings":"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","file":"Heap.js","sourceRoot":"..\\..\\..\\..\\assets\\scripts","sourcesContent":["/**\n * Creates a binary heap.\n *\n * @constructor\n * @param {function} customCompare An optional custom node comparison\n * function.\n */\nvar BinaryHeap = function (customCompare) {\n  /**\n   * The backing data of the heap.\n   * @type {Object[]}\n   * @private\n   */\n  this.list = [];\n\n  if (customCompare) {\n    this.compare = customCompare;\n  }\n};\n\n/**\n * Builds a heap with the provided keys and values, this will discard the\n * heap's current data.\n *\n * @param {Array} keys An array of keys.\n * @param {Array} values An array of values. This must be the same size as the\n * key array.\n */\nBinaryHeap.prototype.buildHeap = function (keys, values) {\n  if (typeof values !== 'undefined' && values.length !== keys.length) {\n    throw new Error('Key array must be the same length as value array');\n  }\n\n  var nodeArray = [];\n\n  for (var i = 0; i < keys.length; i++) {\n    nodeArray.push(new Node(keys[i], values ? values[i] : undefined));\n  }\n\n  buildHeapFromNodeArray(this, nodeArray);\n};\n\n/**\n * Clears the heap's data, making it an empty heap.\n */\nBinaryHeap.prototype.clear = function () {\n  this.list.length = 0;\n};\n\n/**\n * Extracts and returns the minimum node from the heap.\n *\n * @return {Node} node The heap's minimum node or undefined if the heap is\n * empty.\n */\nBinaryHeap.prototype.extractMinimum = function () {\n  if (!this.list.length) {\n    return undefined;\n  }\n  if (this.list.length === 1) {\n    return this.list.shift();\n  }\n  var min = this.list[0];\n  this.list[0] = this.list.pop();\n  heapify(this, 0);\n  return min;\n};\n\n/**\n * Returns the minimum node from the heap.\n *\n * @return {Node} node The heap's minimum node or undefined if the heap is\n * empty.\n */\nBinaryHeap.prototype.findMinimum = function () {\n  return this.isEmpty() ? undefined : this.list[0];\n};\n\n/**\n * Inserts a new key-value pair into the heap.\n *\n * @param {Object} key The key to insert.\n * @param {Object} value The value to insert.\n * @return {Node} node The inserted node.\n */\nBinaryHeap.prototype.insert = function (key, value) {\n  var i = this.list.length;\n  var node = new Node(key, value);\n  this.list.push(node);\n  var parent = getParent(i);\n  while (typeof parent !== 'undefined' &&\n      this.compare(this.list[i], this.list[parent]) < 0) {\n    swap(this.list, i, parent);\n    i = parent;\n    parent = getParent(i);\n  }\n  return node;\n};\n\n/**\n * @return {boolean} Whether the heap is empty.\n */\nBinaryHeap.prototype.isEmpty = function () {\n  return !this.list.length;\n};\n\n/**\n * @return {number} The size of the heap.\n */\nBinaryHeap.prototype.size = function () {\n  return this.list.length;\n};\n\n/**\n * Joins another heap to this one.\n *\n * @param {BinaryHeap} otherHeap The other heap.\n */\nBinaryHeap.prototype.union = function (otherHeap) {\n  var array = this.list.concat(otherHeap.list);\n  buildHeapFromNodeArray(this, array);\n};\n\n/**\n * Compares two nodes with each other.\n *\n * @private\n * @param {Object} a The first key to compare.\n * @param {Object} b The second key to compare.\n * @return -1, 0 or 1 if a < b, a == b or a > b respectively.\n */\nBinaryHeap.prototype.compare = function (a, b) {\n  if (a.key > b.key) {\n    return 1;\n  }\n  if (a.key < b.key) {\n    return -1;\n  }\n  return 0;\n};\n\n/**\n * Heapifies a node.\n *\n * @private\n * @param {BinaryHeap} heap The heap containing the node to heapify.\n * @param {number} i The index of the node to heapify.\n */\nfunction heapify(heap, i) {\n  var l = getLeft(i);\n  var r = getRight(i);\n  var smallest = i;\n  if (l < heap.list.length &&\n      heap.compare(heap.list[l], heap.list[i]) < 0) {\n    smallest = l;\n  }\n  if (r < heap.list.length &&\n      heap.compare(heap.list[r], heap.list[smallest]) < 0) {\n    smallest = r;\n  }\n  if (smallest !== i) {\n    swap(heap.list, i, smallest);\n    heapify(heap, smallest);\n  }\n}\n\n/**\n * Builds a heap from a node array, this will discard the heap's current data.\n *\n * @private\n * @param {BinaryHeap} heap The heap to override.\n * @param {Node[]} nodeArray The array of nodes for the new heap.\n */\nfunction buildHeapFromNodeArray(heap, nodeArray) {\n  heap.list = nodeArray;\n  for (var i = Math.floor(heap.list.length / 2); i >= 0; i--) {\n    heapify(heap, i);\n  }\n}\n\n/**\n * Swaps two values in an array.\n *\n * @private\n * @param {Array} array The array to swap on.\n * @param {number} a The index of the first element.\n * @param {number} b The index of the second element.\n */\nfunction swap(array, a, b) {\n  var temp = array[a];\n  array[a] = array[b];\n  array[b] = temp;\n}\n\n/**\n * Gets the index of a node's parent.\n *\n * @private\n * @param {number} i The index of the node to get the parent of.\n * @return {number} The index of the node's parent.\n */\nfunction getParent(i) {\n  if (i === 0) {\n    return undefined;\n  }\n  return Math.floor((i - 1) / 2);\n}\n\n/**\n * Gets the index of a node's left child.\n *\n * @private\n * @param {number} i The index of the node to get the left child of.\n * @return {number} The index of the node's left child.\n */\nfunction getLeft(i) {\n  return 2 * i + 1;\n}\n\n/**\n * Gets the index of a node's right child.\n *\n * @private\n * @param {number} i The index of the node to get the right child of.\n * @return {number} The index of the node's right child.\n */\nfunction getRight(i) {\n  return 2 * i + 2;\n}\n\n/**\n * Creates a node.\n *\n * @constructor\n * @param {Object} key The key of the new node.\n * @param {Object} value The value of the new node.\n */\nfunction Node(key, value) {\n  this.key = key;\n  this.value = value;\n}\n\nmodule.exports = BinaryHeap;\n"]}