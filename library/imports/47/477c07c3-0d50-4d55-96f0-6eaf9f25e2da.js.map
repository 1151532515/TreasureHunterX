{"version":3,"sources":["..\\..\\..\\..\\assets\\plugin_scripts/assets\\plugin_scripts\\NetworkDoctor.js"],"names":["NetworkDoctor","serverFps","clientUpsyncFps","millisPerServerFrame","parseInt","_tooLongSinceLastFrameDiffReceivedThreshold","setupFps","fps","_lastFrameDiffRecvTime","_tooLongSinceLastFrameDiffReceived","undefined","Date","now","_consecutiveALittleLongFrameDiffReceivedIntervalCount","_consecutiveALittleLongFrameDiffReceivedIntervalCountThreshold","onNewFrameDiffReceived","frameDiff","intervalFromLastFrameDiff","console","log","_networkComplaintPrefix","generateNetworkComplaint","excludeTypeConstantALittleLongFrameDiffReceivedInterval","excludeTypeTooLongSinceLastFrameDiffReceived","hasBattleStopped","shouldComplain","ret","onBattleStopped","isClientSessionConnected","window","game","clientSession","connected"],"mappings":";;;;;;AAAA,SAASA,aAAT,CAAuBC,SAAvB,EAAkCC,eAAlC,EAAmD;AACjD,OAAKD,SAAL,GAAiBA,SAAjB;AACA,OAAKC,eAAL,GAAuBA,eAAvB;AACA,OAAKC,oBAAL,GAA4BC,SAAS,OAAO,KAAKH,SAArB,CAA5B;AACA,OAAKI,2CAAL,GAAoD,KAAKF,oBAAL,IAA6B,CAAjF;;AAEA,OAAKG,QAAL,GAAgB,UAASC,GAAT,EAAc;AAC5B,SAAKN,SAAL,GAAiB,KAAKC,eAAL,GAAuBK,GAAxC;AACA,SAAKJ,oBAAL,GAA4BC,SAAS,OAAO,KAAKH,SAArB,CAA5B;AACA,SAAKI,2CAAL,GAAoD,KAAKF,oBAAL,IAA6B,CAAjF;AACD,GAJD;;AAMA,OAAKK,sBAAL,GAA8B,IAA9B;AACA,OAAKC,kCAAL,GAA0C,YAAW;AACnD,QAAIC,cAAc,KAAKF,sBAAnB,IAA6C,SAAS,KAAKA,sBAA/D,EAAuF,OAAO,KAAP;AACvF,WAAQ,KAAKH,2CAAL,IAAqDM,KAAKC,GAAL,KAAa,KAAKJ,sBAA/E;AACD,GAHD;;AAKA,OAAKK,qDAAL,GAA6D,CAA7D;AACA,OAAKC,8DAAL,GAAsE,GAAtE;;AAEA,OAAKC,sBAAL,GAA8B,UAASC,SAAT,EAAoB;AAChD,QAAIJ,MAAMD,KAAKC,GAAL,EAAV;AACA,QAAIF,cAAc,KAAKF,sBAAnB,IAA6C,SAAS,KAAKA,sBAA/D,EAAuF;AACrF,UAAIS,4BAA6BL,MAAM,KAAKJ,sBAA5C;AACA,UAAK,KAAKL,oBAAL,IAA6B,CAA9B,GAAmCc,yBAAvC,EAAkE;AAChE,UAAE,KAAKJ,qDAAP;AACAK,gBAAQC,GAAR,CAAY,4CAAZ,EAA0DF,yBAA1D;AACD,OAHD,MAGO;AACL,aAAKJ,qDAAL,GAA6D,CAA7D;AACD;AACF;AACD,SAAKL,sBAAL,GAA8BI,GAA9B;AACD,GAZD;;AAcA,OAAKQ,uBAAL,GAA+B,6BAA/B;;AAEA,OAAKC,wBAAL,GAAgC,UAASC,uDAAT,EAAkEC,4CAAlE,EAAgH;AAC9I,QAAI,KAAKC,gBAAT,EAA2B,OAAO,IAAP;AAC3B,QAAIC,iBAAiB,KAArB;AACA,QAAIC,MAAM,KAAKN,uBAAf;AACA,QAAI,QAAQE,uDAAR,IAAmE,KAAKR,8DAAL,IAAuE,KAAKD,qDAAnJ,EAA0M;AACxM,WAAKA,qDAAL,GAA6D,CAA7D;AACAa,aAAO,oDAAP;AACAD,uBAAiB,IAAjB;AACD;AACD,QAAI,QAAQF,4CAAR,IAAwD,KAAKd,kCAAL,EAA5D,EAAuG;AACrGiB,aAAO,6CAAP;AACAD,uBAAiB,IAAjB;AACD;AACD,WAAQA,iBAAiBC,GAAjB,GAAuB,IAA/B;AACD,GAdD;;AAgBA,OAAKF,gBAAL,GAAwB,KAAxB;AACA,OAAKG,eAAL,GAAuB,YAAW;AAChC,SAAKH,gBAAL,GAAwB,IAAxB;AACD,GAFD;;AAIA,OAAKI,wBAAL,GAAgC,YAAW;AACzC,QAAI,CAACC,OAAOC,IAAZ,EAAkB,OAAO,KAAP;AAClB,QAAI,CAACD,OAAOC,IAAP,CAAYC,aAAjB,EAAgC,OAAO,KAAP;AAChC,WAAOF,OAAOC,IAAP,CAAYC,aAAZ,CAA0BC,SAAjC;AACD,GAJD;AAKD;;AAEDH,OAAO7B,aAAP,GAAuBA,aAAvB","file":"NetworkDoctor.js","sourceRoot":"..\\..\\..\\..\\assets\\plugin_scripts","sourcesContent":["function NetworkDoctor(serverFps, clientUpsyncFps) {\n  this.serverFps = serverFps;\n  this.clientUpsyncFps = clientUpsyncFps;\n  this.millisPerServerFrame = parseInt(1000 / this.serverFps);\n  this._tooLongSinceLastFrameDiffReceivedThreshold = (this.millisPerServerFrame << 6);\n\n  this.setupFps = function(fps) {\n    this.serverFps = this.clientUpsyncFps = fps;\n    this.millisPerServerFrame = parseInt(1000 / this.serverFps);\n    this._tooLongSinceLastFrameDiffReceivedThreshold = (this.millisPerServerFrame << 6);\n  }\n\n  this._lastFrameDiffRecvTime = null;\n  this._tooLongSinceLastFrameDiffReceived = function() {\n    if (undefined === this._lastFrameDiffRecvTime || null === this._lastFrameDiffRecvTime) return false;\n    return (this._tooLongSinceLastFrameDiffReceivedThreshold <= (Date.now() - this._lastFrameDiffRecvTime));\n  };\n\n  this._consecutiveALittleLongFrameDiffReceivedIntervalCount = 0;\n  this._consecutiveALittleLongFrameDiffReceivedIntervalCountThreshold = 120;\n\n  this.onNewFrameDiffReceived = function(frameDiff) {\n    var now = Date.now();\n    if (undefined !== this._lastFrameDiffRecvTime && null !== this._lastFrameDiffRecvTime) {\n      var intervalFromLastFrameDiff = (now - this._lastFrameDiffRecvTime);\n      if ((this.millisPerServerFrame << 5) < intervalFromLastFrameDiff) {\n        ++this._consecutiveALittleLongFrameDiffReceivedIntervalCount;\n        console.log('Medium delay, intervalFromLastFrameDiff is', intervalFromLastFrameDiff);\n      } else {\n        this._consecutiveALittleLongFrameDiffReceivedIntervalCount = 0;\n      }\n    }\n    this._lastFrameDiffRecvTime = now;\n  };\n\n  this._networkComplaintPrefix = \"\\nNetwork is not good >_<\\n\";\n\n  this.generateNetworkComplaint = function(excludeTypeConstantALittleLongFrameDiffReceivedInterval, excludeTypeTooLongSinceLastFrameDiffReceived) {\n    if (this.hasBattleStopped) return null;\n    var shouldComplain = false;\n    var ret = this._networkComplaintPrefix;\n    if (true != excludeTypeConstantALittleLongFrameDiffReceivedInterval && this._consecutiveALittleLongFrameDiffReceivedIntervalCountThreshold <= this._consecutiveALittleLongFrameDiffReceivedIntervalCount) {\n      this._consecutiveALittleLongFrameDiffReceivedIntervalCount = 0;\n      ret += \"\\nConstantly having a little long recv interval.\\n\";\n      shouldComplain = true;\n    }\n    if (true != excludeTypeTooLongSinceLastFrameDiffReceived && this._tooLongSinceLastFrameDiffReceived()) {\n      ret += \"\\nToo long since last received frameDiff.\\n\";\n      shouldComplain = true;\n    }\n    return (shouldComplain ? ret : null);\n  };\n\n  this.hasBattleStopped = false;\n  this.onBattleStopped = function() {\n    this.hasBattleStopped = true;\n  };\n\n  this.isClientSessionConnected = function() {\n    if (!window.game) return false;\n    if (!window.game.clientSession) return false;\n    return window.game.clientSession.connected; \n  };\n}\n\nwindow.NetworkDoctor = NetworkDoctor;\n"]}